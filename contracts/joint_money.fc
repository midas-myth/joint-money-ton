#include "imports/stdlib.fc";
#include "constants.fc";

const int op::create_group = 1;
const int op::deposit = 2;
const int op::withdraw = 3;

(int, slice, int, cell) parse_group(slice body) {
    int id = body~load_uint(GROUP_MAP_KEY_SIZE_BITS);
    slice name = body~load_bits(GROUP_NAME_SIZE_BITS);
    int balance = body~load_grams();
    cell members = body~load_maybe_ref();
    body.end_parse();

    return (id, name, balance, members);
}

slice serialize_group(int id, slice name, int balance, cell members) {
    return begin_cell()
        .store_uint(id, GROUP_MAP_KEY_SIZE_BITS)
        .store_slice(name)
        .store_grams(balance)
        .store_maybe_ref(members)
        .end_cell()
        .begin_parse();
}


slice get_group(int id) {
    slice data_reader = get_data().begin_parse();
    int group_count = data_reader~load_uint(GROUP_MAP_KEY_SIZE_BITS);
    cell group_map = data_reader~load_dict();
    data_reader.end_parse();

    (slice group, int key) = group_map.udict_get?(GROUP_MAP_KEY_SIZE_BITS, id);

    return group;
}

() set_group(int id, slice group) impure {
    slice data_reader = get_data().begin_parse();
    int group_count = data_reader~load_uint(GROUP_MAP_KEY_SIZE_BITS);
    cell group_map = data_reader~load_dict();
    data_reader.end_parse();

    (slice existing_group, int key) = group_map.udict_get?(GROUP_MAP_KEY_SIZE_BITS, id);

    if (null?(existing_group)) {        
        group_count += 1;
    }

    group_map~udict_set(GROUP_MAP_KEY_SIZE_BITS, id, group);

    set_data(
        begin_cell()
            .store_uint(group_count, GROUP_MAP_KEY_SIZE_BITS)
            .store_dict(group_map)
            .end_cell()
    );
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    ;;   src:MsgAddress dest:MsgAddressInt 
    ;;   value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams
    ;;   created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed;

    slice msg_reader = in_msg_full.begin_parse();
    ;; bit prefix, instant hypercube routing, bounce flag, bounced flag
    int flags = msg_reader~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice src = msg_reader~load_msg_addr();
    slice dest = msg_reader~load_msg_addr();
    int value = msg_reader~load_coins();
    cell currency_collection = msg_reader~load_dict();
    int ihr_fee = msg_reader~load_grams();
    int fwd_fee = msg_reader~load_grams();
    int created_lt = msg_reader~load_uint(64);
    int created_at = msg_reader~load_uint(32);

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::create_group) {        
        slice data_reader = get_data().begin_parse();
        int group_count = data_reader~load_uint(GROUP_MAP_KEY_SIZE_BITS);
        int new_group_id = group_count + 1;

        cell name_cell = in_msg_body~load_ref();
        slice name_reader = name_cell.begin_parse();
        slice name = name_reader~load_bits(GROUP_NAME_SIZE_BITS);
        name_reader.end_parse();
        if (name.slice_empty?()) {
            throw(0xffff);
        }
        int balance = in_msg_body~load_grams();
        cell members = in_msg_body~load_maybe_ref();
        in_msg_body.end_parse();

        ;; int id, slice name, int balance, cell members
        slice new_group = serialize_group(new_group_id, name, balance, members);

        set_group(
            new_group_id,
            new_group   
        );

        return ();
    }
    elseif (op == op::deposit) {
        return ();
    }
    elseif (op == op::withdraw) {
        return ();
    }

    throw(0xffff);
}


(int, slice, int) get_group_by_id(int id) method_id {
    slice group = get_group(id);

    if (null?(group)) {
        return (0, "", 0);
    }

    (int group_id, slice group_name, int group_balance, cell group_members) = parse_group(group);

 
    return (group_id, group_name, group_balance);
}

